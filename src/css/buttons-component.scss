@use "mixins/utils" as utils;
@use "sass:map";
@use "sass:color";
@use "sass:math";

$light: () !default;
$dark: () !default;
$height: 40px !default;
$padding: 0.5em 1em !default;
$font-size: 1rem !default;
$font-weight: 400 !default;
$line-height: 1.5 !default;
$border-width: 1px !default;
$border-radius: .375em !default;
$ring-width: 1px !default;
$ring-offset: 2px !default;

@function getForegroundColor($bg-color, $fg-color-default) {
  $fg-color: $fg-color-default;

  $fg-lightness: color.channel($fg-color-default, 'lightness', $space: hsl);
  $bg-lightness: color.channel($bg-color, 'lightness', $space: hsl);

  $diff: math.abs($fg-lightness - $bg-lightness);

  @if $diff < 40% {
    $fg-color: color.invert($fg-color-default);
  }

  @return $fg-color;
}

@mixin defineBtnVars($name, $base-bg, $fg-color) {
  $base-fg: getForegroundColor($base-bg, $fg-color);

  @include utils.register(--btn-#{$name}-bg, $base-bg, "color");
  @include utils.register(--btn-#{$name}-fg, $base-fg, "color");

  $hover-bg: color.mix($base-fg, $base-bg, 10%);
  @include utils.register(--btn-#{$name}-hover-bg, $hover-bg, "color");
  @include utils.register(--btn-#{$name}-hover-fg, $base-fg, "color");

  $active-bg: color.mix($base-fg, $base-bg, 20%);
  @include utils.register(--btn-#{$name}-active-bg, $active-bg, "color");
  @include utils.register(--btn-#{$name}-active-fg, $base-fg, "color");
}

@layer #{utils.$prefix}-variables {
  :root {
    @include utils.register(--btn-height, $height);
    @include utils.register(--btn-radius, $border-radius);
    @include utils.register(--btn-border-width, $border-width);
    @include utils.register(--btn-font-size, $font-size);
    @include utils.register(--btn-font-weight, $font-weight);
    @include utils.register(--btn-line-height, $line-height);

    // Colors
    @include defineBtnVars("primary", map.get($light, 'primary'), map.get($light, 'foreground'));
    @include defineBtnVars("accent", map.get($light, 'accent'), map.get($light, 'foreground'));
    @include defineBtnVars("secondary", map.get($light, 'secondary'), map.get($light, 'foreground'));
    @include defineBtnVars("danger", map.get($light, 'danger'), map.get($light, 'foreground'));

    &.dark {
      @include defineBtnVars("primary", map.get($dark, 'primary'), map.get($dark, 'foreground'));
      @include defineBtnVars("accent", map.get($dark, 'accent'), map.get($dark, 'foreground'));
      @include defineBtnVars("secondary", map.get($dark, 'secondary'), map.get($dark, 'foreground'));
      @include defineBtnVars("danger", map.get($dark, 'danger'), map.get($dark, 'foreground'));
    }
  }
}

.btn {
  height: utils.get(--btn-height);
  padding: $padding;
  font-size: utils.get(--btn-font-size);
  font-weight: utils.get(--btn-font-weight);
  line-height: utils.get(--btn-line-height);
  color: utils.getColor(--foreground);
  text-align: center;
  text-decoration: none;
  vertical-align: middle;
  user-select: none;
  cursor: pointer;
  display: inline-block;
  background-color: transparent;
  border: utils.get(--btn-border-width) solid transparent;
  border-radius: utils.get(--btn-radius);
  transition:
      color .15s ease-in-out,
      background-color .15s ease-in-out,
      border-color .15s ease-in-out,
      box-shadow .15s ease-in-out;

  &:active {
    transition-duration: 0s;
  }

  &:disabled, &[aria-disabled="true"], &.loading {
    box-shadow: none;
    pointer-events: none;
    cursor: default;
  }

  &.loading {
    color: transparent;
    background-size: 26px 26px;
    position: relative;

    * {
      display: none;
    }

    &:before {
      content: "";
      top: 3px;
      width: 22px;
      height: 22px;
      border-radius: 50%;
      border: 2px solid utils.getColor(--btn-accent-fg, .5);
      object-fit: cover;
      box-sizing: border-box;
      position: relative;
      display: inline-block;
      animation: 0.6s linear 0s infinite normal none running #{utils.$prefix}-btn-spinner-animation;
    }
  }

  &.w-full {
    width: 100%;
    max-width: 100%;
  }

  &.btn-accent {
    background-color: utils.getColor(--btn-accent-bg);
    border-color: utils.getColor(--btn-accent-bg);
    color: utils.getColor(--btn-accent-fg);

    &:hover {
      background-color: utils.getColor(--btn-accent-hover-bg);
      border-color: utils.getColor(--btn-accent-hover-bg);
      color: utils.getColor(--btn-accent-hover-fg);
    }

    &:active {
      background-color: utils.getColor(--btn-accent-active-bg);
      border-color: utils.getColor(--btn-accent-active-bg);
      color: utils.getColor(--btn-accent-active-fg);
    }

    &:disabled,
    &[aria-disabled="true"] {
      background-color: utils.getColor(--btn-accent-bg);
      border-color: utils.getColor(--btn-accent-bg);
      color: utils.getColor(--btn-accent-fg);
      filter: contrast(0.5) brightness(0.6);
    }

    &.loading {

      &:before {
        border-color: utils.getColor(--btn-accent-fg, 0.2);
        border-bottom-color: utils.getColor(--btn-accent-fg);
      }
    }
  }

  &.btn-primary {
    background-color: utils.getColor(--btn-primary-bg);
    border-color: utils.getColor(--btn-primary-bg);
    color: utils.getColor(--btn-primary-fg);

    &:hover {
      background-color: utils.getColor(--btn-primary-hover-bg);
      border-color: utils.getColor(--btn-primary-hover-bg);
      color: utils.getColor(--btn-primary-hover-fg);
    }

    &:active {
      background-color: utils.getColor(--btn-primary-active-bg);
      border-color: utils.getColor(--btn-primary-active-bg);
      color: utils.getColor(--btn-primary-active-fg);
    }

    &:disabled,
    &[aria-disabled="true"] {
      background-color: utils.getColor(--btn-primary-bg);
      border-color: utils.getColor(--btn-primary-bg);
      color: utils.getColor(--btn-primary-fg);
      filter: contrast(0.5) brightness(0.6);
    }

    &.loading {

      &:before {
        border-color: utils.getColor(--btn-primary-fg, 0.2);
        border-bottom-color: utils.getColor(--btn-primary-fg);
      }
    }
  }

  &.btn-secondary {
    background-color: utils.getColor(--btn-secondary-bg);
    border-color: utils.getColor(--btn-secondary-bg);
    color: utils.getColor(--btn-secondary-fg);

    &:hover {
      background-color: utils.getColor(--btn-secondary-hover-bg);
      border-color: utils.getColor(--btn-secondary-hover-bg);
      color: utils.getColor(--btn-secondary-hover-fg);
    }

    &:active {
      background-color: utils.getColor(--btn-secondary-active-bg);
      border-color: utils.getColor(--btn-secondary-active-bg);
      color: utils.getColor(--btn-secondary-active-fg);
    }

    &:disabled,
    &[aria-disabled="true"] {
      background-color: utils.getColor(--btn-secondary-bg);
      border-color: utils.getColor(--btn-secondary-bg);
      color: utils.getColor(--btn-secondary-fg);
      filter: contrast(0.5) brightness(0.6);
    }

    &.loading {

      &:before {
        border-color: utils.getColor(--btn-secondary-fg, 0.2);
        border-bottom-color: utils.getColor(--btn-secondary-fg);
      }
    }
  }

  &.btn-danger {
    background-color: utils.getColor(--btn-danger-bg);
    border-color: utils.getColor(--btn-danger-bg);
    color: utils.getColor(--btn-danger-fg);

    &:hover {
      background-color: utils.getColor(--btn-danger-hover-bg);
      border-color: utils.getColor(--btn-danger-hover-bg);
      color: utils.getColor(--btn-danger-hover-fg);
    }

    &:active {
      background-color: utils.getColor(--btn-danger-active-bg);
      border-color: utils.getColor(--btn-danger-active-bg);
      color: utils.getColor(--btn-danger-active-fg);
    }

    &:disabled,
    &[aria-disabled="true"] {
      background-color: utils.getColor(--btn-danger-bg);
      border-color: utils.getColor(--btn-danger-bg);
      color: utils.getColor(--btn-danger-fg);
      filter: contrast(0.5) brightness(0.6);
    }

    &.loading {

      &:before {
        border-color: utils.getColor(--btn-danger-fg, 0.2);
        border-bottom-color: utils.getColor(--btn-danger-fg);
      }
    }
  }

  &.btn-outline-accent {
    background-color: transparent;
    border-color: utils.getColor(--btn-accent-bg);
    color: color-mix(in srgb, utils.getColor(--foreground, .8) 70%, utils.getColor(--btn-accent-bg, .8) 30%);

    &:hover {
      background-color: utils.getColor(--btn-accent-hover-bg, .1);
      border-color: utils.getColor(--btn-accent-bg);
      color: color-mix(in srgb, utils.getColor(--foreground, .9) 80%, utils.getColor(--btn-accent-bg, .9) 20%);
    }

    &:active {
      background-color: utils.getColor(--btn-accent-active-bg, .15);
      border-color: utils.getColor(--btn-accent-active-bg);
      color: color-mix(in srgb, utils.getColor(--foreground, .95) 85%, utils.getColor(--btn-accent-bg, .95) 15%);
    }

    &:disabled,
    &[aria-disabled="true"] {
      background-color: utils.getColor(--btn-accent-bg, .25);
      border-color: utils.getColor(--btn-accent-bg, .25);
      color: color-mix(in srgb, utils.getColor(--foreground, .8) 70%, utils.getColor(--btn-accent-bg, .8) 30%);
      filter: contrast(0.5);
    }

    &.loading {
      border-color: utils.getColor(--btn-accent-bg);
      color: utils.getColor(--btn-accent-bg);

      &:before {
        border-color: utils.getColor(--btn-accent-bg, 0.2);
        border-bottom-color: utils.getColor(--btn-accent-bg);
      }
    }
  }

  &.btn-outline-primary {
    background-color: transparent;
    border-color: utils.getColor(--btn-primary-bg);
    color: color-mix(in srgb, utils.getColor(--foreground, .8) 70%, utils.getColor(--btn-primary-bg, .8) 30%);

    &:hover {
      background-color: utils.getColor(--btn-primary-hover-bg, .1);
      border-color: utils.getColor(--btn-primary-bg);
      color: color-mix(in srgb, utils.getColor(--foreground, .9) 80%, utils.getColor(--btn-primary-bg, .9) 20%);
    }

    &:active {
      background-color: utils.getColor(--btn-primary-active-bg, .15);
      border-color: utils.getColor(--btn-primary-active-bg);
      color: color-mix(in srgb, utils.getColor(--foreground, .95) 85%, utils.getColor(--btn-primary-bg, .95) 15%);
    }

    &:disabled,
    &[aria-disabled="true"] {
      background-color: utils.getColor(--btn-primary-bg, .25);
      border-color: utils.getColor(--btn-primary-bg, .25);
      color: color-mix(in srgb, utils.getColor(--foreground, .8) 70%, utils.getColor(--btn-primary-bg, .8) 30%);
      filter: contrast(0.5);
    }

    &.loading {
      border-color: utils.getColor(--btn-primary-bg);
      color: utils.getColor(--btn-primary-bg);

      &:before {
        border-color: utils.getColor(--btn-primary-bg, 0.1);
        border-bottom-color: utils.getColor(--btn-primary-bg);
      }
    }
  }

  &.btn-outline-secondary {
    background-color: transparent;
    border-color: utils.getColor(--btn-secondary-bg);
    color: color-mix(in srgb, utils.getColor(--foreground, .8) 70%, utils.getColor(--btn-secondary-bg, .8) 30%);

    &:hover {
      background-color: utils.getColor(--btn-secondary-hover-bg, .1);
      border-color: utils.getColor(--btn-secondary-bg);
      color: color-mix(in srgb, utils.getColor(--foreground, .9) 80%, utils.getColor(--btn-secondary-bg, .9) 20%);
    }

    &:active {
      background-color: utils.getColor(--btn-secondary-active-bg, .15);
      border-color: utils.getColor(--btn-secondary-active-bg);
      color: color-mix(in srgb, utils.getColor(--foreground, .95) 85%, utils.getColor(--btn-secondary-bg, .95) 15%);
    }

    &:disabled,
    &[aria-disabled="true"] {
      background-color: utils.getColor(--btn-secondary-bg, .25);
      border-color: utils.getColor(--btn-secondary-bg, .25);
      color: color-mix(in srgb, utils.getColor(--foreground, .8) 70%, utils.getColor(--btn-secondary-bg, .8) 30%);
      filter: contrast(0.5);
    }

    &.loading {
      border-color: utils.getColor(--btn-secondary-bg);
      color: utils.getColor(--btn-secondary-bg);

      &:before {
        border-color: utils.getColor(--btn-secondary-bg, 0.2);
        border-bottom-color: utils.getColor(--btn-secondary-bg);
      }
    }
  }

  &.btn-outline-danger {
    background-color: transparent;
    border-color: utils.getColor(--btn-danger-bg);
    color: color-mix(in srgb, utils.getColor(--foreground, .8) 70%, utils.getColor(--btn-danger-bg, .8) 30%);

    &:hover {
      background-color: utils.getColor(--btn-danger-hover-bg, .1);
      border-color: utils.getColor(--btn-danger-bg);
      color: color-mix(in srgb, utils.getColor(--foreground, .9) 80%, utils.getColor(--btn-danger-bg, .9) 20%);
    }

    &:active {
      background-color: utils.getColor(--btn-danger-active-bg, .15);
      border-color: utils.getColor(--btn-danger-active-bg);
      color: color-mix(in srgb, utils.getColor(--foreground, .95) 85%, utils.getColor(--btn-danger-bg, .95) 15%);
    }

    &:disabled,
    &[aria-disabled="true"] {
      background-color: utils.getColor(--btn-danger-bg, .25);
      border-color: utils.getColor(--btn-danger-bg, .25);
      color: color-mix(in srgb, utils.getColor(--foreground, .8) 70%, utils.getColor(--btn-danger-bg, .8) 30%);
      filter: contrast(0.5);
    }

    &.loading {
      border-color: utils.getColor(--btn-danger-bg);
      color: utils.getColor(--btn-danger-bg);

      &:before {
        border-color: utils.getColor(--btn-danger-bg, 0.2);
        border-bottom-color: utils.getColor(--btn-danger-bg);
      }
    }
  }
}

@keyframes #{utils.$prefix}-btn-spinner-animation {
  0% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(180deg);
  }
  100% {
    transform: rotate(360deg);
  }
}


